#!/bin/bash
#--------------------------------------------------------------------------
# Code generated by the SmartSoft MDSD Toolchain
# The SmartSoft Toolchain has been developed by:
#  
# Service Robotics Research Center
# University of Applied Sciences Ulm
# Prittwitzstr. 10
# 89075 Ulm (Germany)
#
# Information about the SmartSoft MDSD Toolchain is available at:
# www.servicerobotik-ulm.de
#
# Please do not modify this file. It will be re-generated
# running the code generator.
#--------------------------------------------------------------------------
#
# Parts in this script are taken from: https://github.com/otubo/misc/commit/3bbf0c9ad93b72e802d5591f2364ccb9d457bbc2#diff-0b590c8bfa296cd726e4d93945f0e24d

#get the desktop parameters
HEIGHT=`xwininfo -root | grep 'Height:' | awk '{print $2}'`
WIDTH=`xwininfo -root | grep 'Width:' | awk '{print $2}'`

#xterm parameters
TERM_HEIGHT=316
TERM_WIDTH=484

#get the window parameters
	
#get the current desktop
CURR_DESK=` wmctrl -d | grep '* DG:'| awk '{print $1}'`

#get the total number of windows.
#NOTE: we are not directly using grep to get the windows from the current desktop as it may serve up some false positives
COMPONENT_WINDOWS=`wmctrl -lx |grep Component| wc -l`
SSH_WINDOWS=`wmctrl -lx |grep SSH| wc -l`
GLOBAL_SCENARIO_WINDOWS=`wmctrl -lx |grep 'Global Scenario Control'| wc -l`


#counter
i=1
#Assume that there are no Global Scenario Controls in the current desktop
GLOBAL_SCENARIO_IN_DESK=0
while  [ $i  -le  $GLOBAL_SCENARIO_WINDOWS ] ; do
	CURR_LINE=`wmctrl -lx | grep 'Global Scenario Control'|head -n $i | tail -n 1`
	WIN_DESK=`echo $CURR_LINE | awk '{print $2}'|sort`
	if  [ $WIN_DESK  -eq  $CURR_DESK ] ; then
	#save the various window properties as supplied by wmctrl .
		GLOBAL_SCENARIO_XID[$GLOBAL_SCENARIO_IN_DESK]=`echo $CURR_LINE | awk '{print $1}'`
	
	#see if the window is "IsViewable" or "IsUnMapped" i.e minimized
		MAP_STATE=`xwininfo -id ${GLOBAL_SCENARIO_XID[$GLOBAL_SCENARIO_IN_DESK]} | grep "Map State:" | awk '{print $3}'`
	#we don't  want the minimized windows to be considered while allocating the space
		if [ "$MAP_STATE"  ==  "IsViewable" ]; then
			GLOBAL_SCENARIO_IN_DESK=$((GLOBAL_SCENARIO_IN_DESK+1))
		else
			GLOBAL_SCENARIO_XID[$GLOBAL_SCENARIO_IN_DESK]=0
		fi	
	fi
	i=$((i+1))
done

#counter
i=1
#Assume that there are no SSH windows in the current desktop
SSH_IN_DESK=0
while  [ $i  -le  $SSH_WINDOWS ] ; do
	CURR_LINE=`wmctrl -lx | grep SSH|head -n $i | tail -n 1`
	WIN_DESK=`echo $CURR_LINE | awk '{print $2}'|sort`
	if  [ $WIN_DESK  -eq  $CURR_DESK ] ; then
	#save the various window properties as supplied by wmctrl .
		SSH_XID[$SSH_IN_DESK]=`echo $CURR_LINE | awk '{print $1}'`
		SSH_NAME[$SSH_IN_DESK]=`echo $CURR_LINE | awk '{print substr($0, index($0,$5))}'`
	
	#see if the window is "IsViewable" or "IsUnMapped" i.e minimized
		MAP_STATE=`xwininfo -id ${SSH_XID[$SSH_IN_DESK]} | grep "Map State:" | awk '{print $3}'`
	#we don't  want the minimized windows to be considered while allocating the space
		if [ "$MAP_STATE"  ==  "IsViewable" ]; then
			SSH_IN_DESK=$((SSH_IN_DESK+1))
		else
			SSH_XID[$SSH_IN_DESK]=0
			SSH_NAME[$SSH_IN_DESK]=""	
		fi	
	fi
	i=$((i+1))
done

#sort SSH
readarray -t SSH_NAME < <(for a in "${SSH_NAME[@]}"; do echo "$a"; done | sort)


#counter
i=1
#Assume that there are no windows in the current desktop
WINDOWS_IN_DESK=0
while  [ $i  -le  $COMPONENT_WINDOWS ] ; do
	CURR_LINE=`wmctrl -lx | grep Component|head -n $i | tail -n 1`
	WIN_DESK=`echo $CURR_LINE | awk '{print $2}'|sort`
	if  [ $WIN_DESK  -eq  $CURR_DESK ] ; then
	#save the various window properties as supplied by wmctrl .
		WIN_XID[$WINDOWS_IN_DESK]=`echo $CURR_LINE | awk '{print $1}'`
		WIN_NAME[$WINDOWS_IN_DESK]=`echo $CURR_LINE | awk '{print substr($0, index($0,$5))}'`
	
	#see if the window is "IsViewable" or "IsUnMapped" i.e minimized
		MAP_STATE=`xwininfo -id ${WIN_XID[$WINDOWS_IN_DESK]} | grep "Map State:" | awk '{print $3}'`
	#we don't  want the minimized windows to be considered while allocating the space
		if [ "$MAP_STATE"  ==  "IsViewable" ]; then
			WINDOWS_IN_DESK=$((WINDOWS_IN_DESK+1))
		else
			WIN_XID[$WINDOWS_IN_DESK]=0
			WIN_NAME[$WINDOWS_IN_DESK]=""	
		fi	
	fi
	i=$((i+1))
done

#sort components
readarray -t WIN_NAME < <(for a in "${WIN_NAME[@]}"; do echo "$a"; done | sort)



X_POS=0
Y_POS=0
DESK=$CURR_DESK

#Gloabal Scenario Control
i=0
while [ $i -lt $GLOBAL_SCENARIO_IN_DESK ] ; do
	
	if [ $((WIDTH+25)) -le $((X_POS+TERM_WIDTH)) ] ; then
		#next row
		if [ $Y_POS -eq 0 ] ; then
			Y_POS=$((Y_POS+TERM_HEIGHT+53))
		else
			Y_POS=$((Y_POS+TERM_HEIGHT+30))
		fi
		X_POS=0
	fi
	if [ $((Y_POS+TERM_HEIGHT)) -ge $((HEIGHT+5)) ] ; then
		#next Desktop
		DESK=$(((DESK+1)%4))
		X_POS=0
		Y_POS=0
	fi
	wmctrl  -i  -r ${GLOBAL_SCENARIO_XID[$i]}  -b remove,maximized_vert,maximized_horz
	wmctrl  -i  -r ${GLOBAL_SCENARIO_XID[$i]} -e "0,$X_POS,$Y_POS,$TERM_WIDTH,$TERM_HEIGHT"
	wmctrl  -i  -r ${GLOBAL_SCENARIO_XID[$i]} -t "$DESK"

	X_POS=$((X_POS+TERM_WIDTH))
	i=$((i+1))
done

#SSH
i=0
while [ $i -lt $SSH_IN_DESK ] ; do
	
	if [ $((WIDTH+25)) -le $((X_POS+TERM_WIDTH)) ] ; then
		#next row
		if [ $Y_POS -eq 0 ] ; then
			Y_POS=$((Y_POS+TERM_HEIGHT+53))
		else
			Y_POS=$((Y_POS+TERM_HEIGHT+30))
		fi
		X_POS=0
	fi
	if [ $((Y_POS+TERM_HEIGHT)) -ge $((HEIGHT+5)) ] ; then
		#next Desktop
		DESK=$(((DESK+1)%4))
		X_POS=0
		Y_POS=0
	fi
	wmctrl    -r ${SSH_NAME[$i]}  -b remove,maximized_vert,maximized_horz
	wmctrl    -r ${SSH_NAME[$i]} -e "0,$X_POS,$Y_POS,$TERM_WIDTH,$TERM_HEIGHT"
	wmctrl    -r ${SSH_NAME[$i]} -t "$DESK"

	X_POS=$((X_POS+TERM_WIDTH))
	i=$((i+1))
done


#components
i=0
while [ $i -lt $WINDOWS_IN_DESK ] ; do
	
	if [ $((WIDTH+25)) -le $((X_POS+TERM_WIDTH)) ] ; then
		#next row
		if [ $Y_POS -eq 0 ] ; then
			Y_POS=$((Y_POS+TERM_HEIGHT+53))
		else
			Y_POS=$((Y_POS+TERM_HEIGHT+30))
		fi
		X_POS=0
	fi
	if [ $((Y_POS+TERM_HEIGHT)) -ge $((HEIGHT+5)) ] ; then
		#next Desktop
		DESK=$(((DESK+1)%4))
		X_POS=0
		Y_POS=0
	fi
	wmctrl    -r ${WIN_NAME[$i]}  -b remove,maximized_vert,maximized_horz
	wmctrl    -r ${WIN_NAME[$i]} -e "0,$X_POS,$Y_POS,$TERM_WIDTH,$TERM_HEIGHT"
	wmctrl    -r ${WIN_NAME[$i]} -t "$DESK"

	X_POS=$((X_POS+TERM_WIDTH))
	i=$((i+1))
done
