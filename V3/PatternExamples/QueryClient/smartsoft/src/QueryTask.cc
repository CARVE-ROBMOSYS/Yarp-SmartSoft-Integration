//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "QueryTask.hh"
#include "QueryClient.hh"

#include <iostream>
#include <yarp/os/LogStream.h>
#include <yarp/smartsoft/QueryPatternClient.h>		// Include RobMoSys compatible YARP port from interface library


QueryTask::QueryTask(SmartACE::SmartComponent *comp) 
:	QueryTaskCore(comp)
{
	std::cout << "constructor QueryTask\n";
}
QueryTask::~QueryTask() 
{
	std::cout << "destructor QueryTask\n";
}



int QueryTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further

	std::string serverPortName = COMP->getGlobalState().getSettings().getServerPort();

	bool ret = yarp::os::Network::connect("/query_pattern/client", serverPortName, "tcp");
	return (!ret);
}

int QueryTask::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel
	
	// to get the incoming data, use this methods:

	std::cout << "Hello from QueryTask " << std::endl;

	Smart::StatusCode status;
	yarp::os::Bottle request;
	yarp::os::Bottle  answer;

	request.addString("sum");
	request.addInt32(5);
	request.addInt32(7);
    yInfo() << "Querying " << request.toString();
	COMP->yarpQueryClient.query(request, answer);
    yInfo() << "answer is " << answer.toString();
    request.clear();

	yarp::os::Time::delay(0.3);							// do other stuff

    // testing queryRequest
    request.addString("multiply");
    request.addInt32(4);
    request.addInt32(5);

	uint32_t ticket{0};
    yInfo() << "Requesting " << request.toString();
	status = COMP->yarpQueryClient.queryRequest(request, ticket);

	yInfo() << "Ticket is " << ticket;

	while(status == Smart::SMART_NODATA)
	{
		if (status == Smart::SMART_DISCONNECTED)
		{
			yError()<<"The client is not connected to nobody...";
			break;
		}
		else if(status == Smart::SMART_ERROR_COMMUNICATION)
		{
			yError()<<"Something is not working in the communication...";
			break;
		}
		else
		{
			answer.clear();
			status = COMP->yarpQueryClient.queryReceive(ticket, answer);
			if ( status == Smart::SMART_NODATA)
				yWarning("No yet data");
			else if (status == Smart::SMART_OK)
				yInfo() << "The result of operation is" << answer.toString();
		}
		yarp::os::Time::delay(0.3);							// do other stuff
	}

	yInfo() << "The result of operation is" << answer.toString();

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	yarp::os::Time::delay(1);
	return 0;
}

int QueryTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
