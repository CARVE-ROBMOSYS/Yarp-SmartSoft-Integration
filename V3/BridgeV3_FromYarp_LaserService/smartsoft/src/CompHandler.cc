//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "CompHandler.hh"
#include "BridgeV3_FromYarp_LaserService.hh"

#include <iostream>

// include communication objects


void CompHandler::onStartup() 
{
	std::cout << "startup - put your startupCode in CompHandler::onStartup()!!!\n";
	Smart::StatusCode status;

	// Check yarp network
	if(!COMP->yarp.checkNetwork(2))
	{
		std::cerr << "Cannot find YARP network, is the yarpserver running and reachable?";
		throw std::runtime_error("Cannot find YARP network, is the yarpserver running and reachable?");
	}

	bool ret = false;
	yarp::os::Property config;
	std::string localPortName;
	std::string remotePortName;


	//
	// Open RangeFinder Client
	//
	localPortName = COMP->getGlobalState().getSettings().getLaserLocalPort();
	remotePortName = COMP->getGlobalState().getSettings().getLaserRemotePort();

	config.put("device", "Rangefinder2DClient");
	config.put("local", localPortName);
	config.put("remote", remotePortName);

	ret = COMP->laserClient.open(config);
	if(!ret)
	{
		std::string errorStr = " Failed opening the laser client device, is the server <" + remotePortName + ">  available?";
		COMP->laserClient.close();
		throw std::invalid_argument(errorStr);
	}

	//
	// Open Transform Client
	//
	localPortName  = COMP->getGlobalState().getSettings().getTf_localPort();
	remotePortName = COMP->getGlobalState().getSettings().getTf_remotePort();
	config.clear();
	config.put("device", "transformClient");
	config.put("local",   localPortName);
	config.put("remote",  remotePortName);

	ret = COMP->tfClient.open(config);
	if(!ret)
	{
		std::string errorStr = " Failed opening the Frame Transform client device, is the server <" + remotePortName + ">  available?";
		COMP->tfClient.close();
		COMP->laserClient.close();
		throw std::invalid_argument(errorStr);
	}

	// Start all services. If you need manual control, use the content of this function to
	// connect and start each service individually, e.g:
	// COMP->connectMyPortName("SmartExampleComponent", "examplePort");
	status = COMP->connectAndStartAllServices();
	
	// Start all tasks. If you need manual control, use the content of this function to
	// start each task individually.
	COMP->startAllTasks();
	
	// Start all timers. If you need manual control, use the content of this function to
	// start each timer individually.
	COMP->startAllTimers();
	
	// Notify the component that setup/initialization is finished.
	// You may move this function to any other place.
	COMP->setStartupFinished(); 
}

void CompHandler::onShutdown() 
{
	std::cout << "shutdown - put your cleanup code in CompHandler::onShutdown()!!!\n";
	COMP->tfClient.close();
	COMP->laserClient.close();
	std::cout << "Closed yarp devices\n";
}
