//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef _QUERYSERVERCORE_HH
#define _QUERYSERVERCORE_HH
	
#include "aceSmartSoft.hh"
#include <iostream>

#include <yarp/os/Network.h>						// Include YARP network core
#include <yarp/os/Bottle.h>							// Include communication data object from main YARP package
#include <yarp/sig/Vector.h>   						// Include communication data object from main YARP package
#include <yarp/smartsoft/QueryPatternServer.h>		// Include RobMoSys compatible YARP port from interface library

class MyQueryHandler : public yarp::smartsoft::QueryPatternServerHandler<yarp::os::Bottle, yarp::os::Bottle >
{
    void handleQuery(yarp::smartsoft::QueryPatternServer<yarp::os::Bottle, yarp::os::Bottle > * server, const int32_t idReq, const yarp::os::Bottle& datum) throw() override
    {
        if (server)
        {
        	yarp::os::Bottle  answer;
            std::string operation = datum.get(0).asString();
            if (operation == "sum")
            {
                answer.addInt32(datum.get(1).asInt32()+datum.get(2).asInt32());
            }
            else if (operation == "subtraction")
            {
                answer.addInt32(datum.get(1).asInt32()-datum.get(2).asInt32());
            }
            else if (operation == "multiply")
            {
                answer.addInt32(datum.get(1).asInt32()*datum.get(2).asInt32());
            }
            else
            {
                yError() << "MyHandler" << operation << "not supported";
                return;
            }

            // do stuff...
            yInfo() << "MyHandler: answering with" << answer.toString();
        	sleep(2);
            int32_t status_code = server->answer(idReq, answer);
            if (status_code == Smart::SMART_OK)
            {
                yInfo() << "MyHandler: answer" << answer.toString() << "successfully sent";
            }
            if (status_code == Smart::SMART_ERROR)
            {
                yError() << "MyHandler: failed to answer";
            }
        }
    }
};



class QueryServerCore
{
private:
	yarp::os::Network yarp;
	MyQueryHandler handler;

public:
	QueryServerCore();

	yarp::smartsoft::QueryPatternServer<yarp::os::Bottle, yarp::os::Bottle >  yarpQueryServer;
};
	
#endif
