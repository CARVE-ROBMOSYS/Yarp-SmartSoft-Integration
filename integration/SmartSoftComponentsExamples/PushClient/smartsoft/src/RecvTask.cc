//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "RecvTask.hh"
#include "PushClient.hh"

#include <iostream>

using namespace std::chrono_literals;


RecvTask::RecvTask(SmartACE::SmartComponent *comp) 
:	RecvTaskCore(comp)
{
	std::cout << "constructor RecvTask\n";
}
RecvTask::~RecvTask() 
{
	std::cout << "destructor RecvTask\n";
}



int RecvTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further

	// Get the server name to connect to, from the component parameters
	std::string serverPortName = COMP->getGlobalState().getSettings().getServerPort();

	// Connect to the server
	//
	// connect method can be called at any time, specifying source, destination and the protocol to use
	// The same conmmand can be used from terminal with:
	//
	// yarp connect /yarp/sendClient /yarp/sendServer tcp

    if( Smart::SMART_OK  != COMP->yarpPushClient.connect(serverPortName) )
    {
    	yError() << " Server port " << serverPortName << " not found, cannot connect.";
		return 1;
    }

    int trials = 10;
	while (Smart::SMART_OK != COMP->yarpPushClient.subscribe())
	{
		if (0 == trials)
		{
			yError()<<"It was impossible to connect to the PushServer, closing...";
			return 1;
		}
		trials--;
		yarp::os::Time::delay(1.0);
	}

	return 0;
}

int RecvTask::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel
	
	// to get the incoming data, use this methods:
	Smart::StatusCode status;

	std::cout << "\n****************************" << std::endl;
	std::cout <<   "    Hello from RecvTask     \n" << std::endl;

	yInfo() << "************ blocking updates ************";

	for (int i=0; i<5; i++)
	{
		yarp::os::Bottle btIn;
		if(COMP->yarpPushClient.getUpdateWait(btIn, 10s) == Smart::SMART_OK)
		{
			yInfo() << "Received: " << btIn.get(0).asInt32();
		}
	}

	yInfo()<<"************ non blocking updates ************";

	for (int i=0; i<5; i++)
	{
		yarp::os::Bottle btIn;
		if(COMP->yarpPushClient.getUpdate(btIn) == Smart::SMART_OK)
		{
			yInfo() << "Received: " << btIn.get(0).asInt32();
		}
		yarp::os::Time::delay(0.3);
	}

	double period=0.0;
	bool active=false;
	COMP->yarpPushClient.getServerInfo(period, active);
	yInfo() << "STATS: period: " << period << " status " << active;

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}

int RecvTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
