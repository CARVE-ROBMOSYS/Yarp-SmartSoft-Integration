//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

#include "DummyTask.hh"
#include "BridgeV3_FromYarp_LaserService.hh"

#include <iostream>
#include <yarp/os/Time.h>
#include <yarp/sig/Matrix.h>
#include <yarp/os/LogStream.h>
#include <yarp/math/FrameTransform.h>

DummyTask::DummyTask(SmartACE::SmartComponent *comp) :	DummyTaskCore(comp),
														iFrame(nullptr),
														iLaser(nullptr),
														laserScan_angleMin(0),
														laserScan_angleMax(0),
														laserScan_distanceMin(0),
														laserScan_distanceMax(0),
														laserScan_step(0)
{
	std::cout << "constructor DummyTask\n";
}

DummyTask::~DummyTask() 
{
	std::cout << "destructor DummyTask\n";
}

int DummyTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	COMP->tfClient.view(iFrame);
	if(iFrame == nullptr)
	{
		yError() << "Cannot get iFrameTransform interface from client";
		return -1;
	}

	COMP->laserClient.view(iLaser);
	if(iLaser == nullptr)
	{
		yError() << "Cannot get iFrameTransform interface from client";
		return -1;
	}

	robotPose_tfName    = COMP->COMP->getGlobalState().getSettings().getTf_robot();
	laserPose_tfName    = COMP->COMP->getGlobalState().getSettings().getTf_laser();
	world_tfName		= COMP->COMP->getGlobalState().getSettings().getTf_world();

	// get configuration data
	iLaser->getDistanceRange(laserScan_distanceMin, laserScan_distanceMax);
	iLaser->getScanLimits(laserScan_angleMin, laserScan_angleMax);
	iLaser->getHorizontalResolution(laserScan_step);
	return 0;
}

int DummyTask::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel

	static int counter = 0;

	// to get the incoming data, use this methods:
	Smart::StatusCode status;
	std::cout << "Hello from DummyTask " << std::endl;

	if(nullptr == iFrame || nullptr == iLaser)
	{
		yError() << "No valid interfaces";
		return -1;		// this is a permanent error, so stop the thread from running
	}

	yarp::sig::Matrix robotPose_mat, laserPose_mat;
	// get the TF between the robot base and the world
	if(!iFrame->getTransform(robotPose_tfName, world_tfName, robotPose_mat) )
	{
		yError() << "Cannot get requested transformation from " << robotPose_tfName << " to " << world_tfName;
		return 0;		// this may be a temporary error, so keep the thread running
	}

	// get the TF between the laser sensor and the world
	if(!iFrame->getTransform(laserPose_tfName, world_tfName, laserPose_mat) )
	{
		yError() << "Cannot get requested transformation from " << laserPose_tfName << " to " << world_tfName;
		return 0;		// this may be a temporary error, so keep the thread running
	}

	if(!iLaser->getLaserMeasurement(data))
	{
		yError() << "Cannot get updated laser scan data.";
		return 0;		// this may be a temporary error, so keep the thread running
	}

	//
	// Compute Robot Base Position
	//
	yarp::sig::Vector rpy;
	CommBasicObjects::CommBasePose basePose;
	yarp::math::FrameTransform robotBase_tf;

	robotBase_tf.fromMatrix(robotPose_mat);
	rpy = robotBase_tf.getRPYRot();

	// Set rotation
	basePose.set_base_roll(     rpy[0]);
	basePose.set_base_elevation(rpy[1]);
	basePose.set_base_azimuth(  rpy[2]);
	// Set translation
	basePose.set_x(robotPose_mat[0][3], 1000);
	basePose.set_y(robotPose_mat[1][3], 1000);
	basePose.set_z(robotPose_mat[2][3], 1000);


	//
	// Compute Laser Sensor Position
	//
	CommBasicObjects::CommPose3d laserPose;
	yarp::math::FrameTransform laserPose_tf;
	laserPose_tf.fromMatrix(laserPose_mat);
	rpy = laserPose_tf.getRPYRot();

	// Set rotation
	laserPose.set_roll(     rpy[0]);
	laserPose.set_elevation(rpy[1]);
	laserPose.set_azimuth(  rpy[2]);
	// Set translation
	laserPose.set_x(robotPose_mat[0][3], 1000);
	laserPose.set_y(robotPose_mat[1][3], 1000);
	laserPose.set_z(robotPose_mat[2][3], 1000);

	// Fill SmartSoft data
	CommBasicObjects::CommMobileLaserScan commMobileLaserScan;		// Bigger data to be filled

	// Tmp helper data
	CommBasicObjects::CommTimeStamp time_stamp;
    CommBasicObjects::CommPose3d    SensorOffset     (70.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	CommBasicObjects::CommBaseState commCurrentBaseState;

	// BaseState
	time_stamp.set_now();
	commCurrentBaseState.set_time_stamp(time_stamp);
	commCurrentBaseState.set_base_position(basePose);
	commCurrentBaseState.set_base_raw_position(basePose);
//	commCurrentBaseState.set_base_velocity(COMP->velocity->getBaseVelocity());
	commMobileLaserScan.set_base_state(commCurrentBaseState);

	// LaserScan6DPose::CommLaserScan
	commMobileLaserScan.set_scan_valid(true);
	commMobileLaserScan.set_scan_time_stamp(time_stamp);
    commMobileLaserScan.set_scan_update_count(counter++);
    commMobileLaserScan.set_scan_double_field_of_view(laserScan_angleMin, laserScan_step);		// TODO verify: accepts degrees, verify yarp device!!
    commMobileLaserScan.set_min_distance(laserScan_distanceMin, 1000);
    commMobileLaserScan.set_max_distance(laserScan_distanceMax, 1000);
    commMobileLaserScan.set_scan_length_unit(1000);												// TODO  verify: 1000 to set meters, is it right??

    double tmpRho, tmpTheta;
//    CommBasicObjectsIDL::LaserScanPoint  smartTmp;
    for(int i=0; i< data.size(); i++)
    {
    	// Is it possible to spped up this, by using a CommBasicObjectsIDL::LaserScanPoint??
    	data[i].get_polar(tmpRho, tmpTheta);
    	commMobileLaserScan.set_scan_index(i, i);
    	commMobileLaserScan.set_scan_distance(i, tmpRho, 1);									// TODO verify: 1 for meter ??
    	commMobileLaserScan.set_scan_intensity(i, 255);											// TODO verify: intensity measured in what???
    }
	commMobileLaserScan.set_sensor_pose(SensorOffset);
	commMobileLaserScan.set_max_scan_size(data.size());

    // Laser world pose
	commMobileLaserScan.setLaser_world_pose(laserPose);

	//
	// Finally publish laser-scan update
	//
	this->laserServiceOutPut(commMobileLaserScan);

	// Delay (should be handled by SmartSoft, but how??)
	yarp::os::Time::delay(COMP->COMP->getGlobalState().getSettings().getPeriod());

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}

int DummyTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	iFrame = nullptr;
	iLaser = nullptr;
	return 0;
}
