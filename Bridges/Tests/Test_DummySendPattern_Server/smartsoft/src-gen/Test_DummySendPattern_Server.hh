//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _TEST_DUMMYSENDPATTERN_SERVER_HH
#define _TEST_DUMMYSENDPATTERN_SERVER_HH
	
#include <iostream>
#include "aceSmartSoft.hh"
#include "smartQueryServerTaskTrigger_T.h"
#include "Test_DummySendPattern_ServerCore.hh"
#include "Test_DummySendPattern_ServerImpl.hh"

// include communication objects
#include <CommBasicObjects/CommBaseState.hh>
#include <CommBasicObjects/CommBaseStateACE.hh>

// include tasks
// include UpcallManagers
#include "BaseStateServiceInUpcallManager.hh"

// include input-handler
// include input-handler


// include handler
#include "CompHandler.hh"


#include "SmartStateChangeHandler.hh"

#define COMP Test_DummySendPattern_Server::instance()

class Test_DummySendPattern_Server : public Test_DummySendPattern_ServerCore {
private:
	static Test_DummySendPattern_Server _test_DummySendPattern_Server;
	
	// constructor
	Test_DummySendPattern_Server();
	
	// copy-constructor
	Test_DummySendPattern_Server(const Test_DummySendPattern_Server& cc);
	
	// destructor
	~Test_DummySendPattern_Server() { };
	
	// load parameter from ini file
	void loadParameter(int argc, char* argv[]);
	
	// instantiate comp-handler
	CompHandler compHandler;
	
	Smart::TaskTriggerSubject* getInputTaskTriggerFromString(const std::string &client);
	
public:
	// component
	Test_DummySendPattern_ServerImpl *component;
	
	
	// define tasks
	
	// define input-ports
	// InputPort BaseStateServiceIn
	Smart::IPushClientPattern<CommBasicObjects::CommBaseState> *baseStateServiceIn;
	Smart::InputTaskTrigger<CommBasicObjects::CommBaseState> *baseStateServiceInInputTaskTrigger;
	BaseStateServiceInUpcallManager *baseStateServiceInUpcallManager;
	
	// define request-ports
	
	// define input-handler
	
	// define output-ports
	
	// define answer-ports
	
	// define request-handlers
	
	
	// define default slave ports
	SmartACE::StateSlave *stateSlave;
	SmartStateChangeHandler *stateChangeHandler;
	SmartACE::WiringSlave *wiringSlave;
	
	
	void init(int argc, char *argv[]);
	void run();
	
	void setStartupFinished();
	Smart::StatusCode connectAndStartAllServices();
	void startAllTasks();
	void startAllTimers();
	
	Smart::StatusCode connectBaseStateServiceIn(const std::string &serverName, const std::string &serviceName);

	// return singleton instance
	static Test_DummySendPattern_Server* instance()
	{
		return (Test_DummySendPattern_Server*)&_test_DummySendPattern_Server;
	}
	
	// connections parameter
	struct connections_struct
	{
		// component struct
		struct component_struct
		{
			// the name of the component
			std::string name;
			std::string initialComponentMode;
			std::string defaultScheduler;
			bool useLogger;
		} component;
		
		//--- task parameter ---
		
		//--- upcall parameter ---
		
		//--- server port parameter ---
	
		//--- client port parameter ---
		struct BaseStateServiceIn_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
		} baseStateServiceIn;
		
	} connections;
};
#endif
