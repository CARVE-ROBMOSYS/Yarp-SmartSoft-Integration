//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "SmartStateChangeHandler.hh"
#include "TestV3_StateSlave.hh"

#include <iostream>
#include "aceSmartSoft.hh"

// Called when a substate is entered
void SmartStateChangeHandler::handleEnterState(const std::string & substate) throw()
{
	// change this code to your needs !!!
	std::cout << "\n***********************************************\n";
	std::cout << "\n*  Received ENTER substate " << substate <<   "\n";
	std::cout << "\n***********************************************\n";

	std::string slaveName = "TestV3_StateSlave";
	std::list<std::string> mainstates;

	std::cout << " Current state is " << COMP->stateSlave->getCurrentMainState() << std::endl;

/*
	std::cout << "list of main states on slave " << slaveName << "; Number of state is " << COMP->mainstates.size() << "\n";
	for(auto iterator = COMP->mainstates.begin(); iterator != COMP->mainstates.end(); ++iterator)
	{
	    std::cout << *iterator << "\n";
	}
	std::cout << "list complete \n";
*/
}

// Called when a substate is left
void SmartStateChangeHandler::handleQuitState(const std::string & substate) throw()
{
	// change this code to your needs !!!
	std::cout << "\n***********************************************\n";
	std::cout << "\n*  Received QUIT substate " << substate <<   "\n";
	std::cout << "\n***********************************************\n";

}
