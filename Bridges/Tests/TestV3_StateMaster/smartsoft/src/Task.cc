//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "Task.hh"
#include "TestV3_StateMaster.hh"

#include <iostream>

Task::Task(SmartACE::SmartComponent *comp) 
:	TaskCore(comp)
{
	std::cout << "constructor Task\n";
}
Task::~Task() 
{
	std::cout << "destructor Task\n";
}



int Task::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further

	std::string slaveName = "TestV3_StateSlave";

	COMP->TestV3_StateMasterCore::stateMaster->getAllMainStates(COMP->mainstates, slaveName);

	std::cout << "list of main states on slave " << slaveName << "; Number of state is " << COMP->mainstates.size() << "\n";
	for(auto iterator = COMP->mainstates.begin(); iterator != COMP->mainstates.end(); ++iterator)
	{
		std::cout << *iterator << "\n";
	}
	std::cout << "list complete \n";

	return 0;
}

int Task::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel
	
	// to get the incoming data, use this methods:
	Smart::StatusCode status, ret;
	std::string currState, desiredState;
	std::string slaveName = "TestV3_StateSlave";


	std::cout << "Hello from Task " << std::endl;
	std::cout << "\tCurrent state is " << COMP->stateMaster->getCurrentMainState(currState, slaveName) << std::endl;

	desiredState = "MyState_1";
	std::cout << "\n\n\nSet slave to " << desiredState << std::endl;
	status = COMP->stateMaster->setWaitState(desiredState, slaveName, "state");
	ret = COMP->stateMaster->getCurrentMainState(currState, slaveName);
	std::cout << "getCurrentMainState() ret is " << ret << "; status " << status << " state is " << currState << std::endl;
	sleep(5);

	desiredState = "Neutral";
	std::cout << "\n\n\nSet slave to " << desiredState << std::endl;
	status = COMP->stateMaster->setWaitState(desiredState, slaveName, "state");
	ret = COMP->stateMaster->getCurrentMainState(currState, slaveName);
	std::cout << "getCurrentMainState() ret is " << ret << "; status " << status << " state is " << currState << std::endl;
	sleep(5);

	desiredState = "MyState_2";
	std::cout << "\n\n\nSet slave to " << desiredState << std::endl;
	status = COMP->stateMaster->setWaitState(desiredState, slaveName, "state");
	ret = COMP->stateMaster->getCurrentMainState(currState, slaveName);
	std::cout << "getCurrentMainState() ret is " << ret << "; status " << status << " state is " << currState << std::endl;
	sleep(5);

	desiredState = "Neutral";
	std::cout << "\n\n\nSet slave to " << desiredState << std::endl;
	status = COMP->stateMaster->setWaitState(desiredState, slaveName, "state");
	ret = COMP->stateMaster->getCurrentMainState(currState, slaveName);
	std::cout << "getCurrentMainState() ret is " << ret << "; status " << status << " state is " << currState << std::endl;
	sleep(5);

	desiredState = "MyState_3";
	std::cout << "\n\n\nSet slave to " << desiredState << std::endl;
	status = COMP->stateMaster->setWaitState(desiredState, slaveName, "state");
	ret = COMP->stateMaster->getCurrentMainState(currState, slaveName);
	std::cout << "getCurrentMainState() ret is " << ret << "; status " << status << " state is " << currState << std::endl;
	sleep(5);

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}

int Task::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
