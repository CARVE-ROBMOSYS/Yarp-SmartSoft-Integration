//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "UpdateThread.hh"
#include "BridgeV3_FromYarp_BaseStateService.hh"

#include <iostream>
#include <yarp/os/Time.h>
#include <yarp/sig/Matrix.h>
#include <yarp/os/LogStream.h>
#include <yarp/math/FrameTransform.h>



UpdateThread::UpdateThread(SmartACE::SmartComponent *comp) 
:	UpdateThreadCore(comp)
{
	std::cout << "constructor UpdateThread\n";
}

UpdateThread::~UpdateThread() 
{
	std::cout << "destructor UpdateThread\n";
}

int UpdateThread::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	COMP->tfClient.view(iFrame);
	if(iFrame == nullptr)
	{
		yError() << "Cannot get iFrameTransform interface from client";
		return -1;
	}

	robotPose_tfName    = COMP->COMP->getGlobalState().getSettings().getTf_robot();
	world_tfName		= COMP->COMP->getGlobalState().getSettings().getTf_world();
	return 0;
}

int UpdateThread::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel

	static int counter = 0;

	// to get the incoming data, use this methods:
	Smart::StatusCode status;
	std::cout << "Hello from UpdateThread " << std::endl;

	if(nullptr == iFrame)
	{
		yError() << "No valid iFrameTransform interface found";
		return -1;		// this is a permanent error, so stop the thread from running
	}

	yarp::sig::Matrix robotPose_mat;
	// get the TF between the robot base and the world
	if(!iFrame->getTransform(robotPose_tfName, world_tfName, robotPose_mat) )
	{
		yError() << "Cannot get requested transformation from " << robotPose_tfName << " to " << world_tfName;
		return 0;		// this may be a temporary error, so keep the thread running
	}

	//
	// Compute Robot Base Position
	//
	yarp::sig::Vector rpy;
	CommBasicObjects::CommBasePose basePose;
	yarp::math::FrameTransform robotBase_tf;

	robotBase_tf.fromMatrix(robotPose_mat);
	rpy = robotBase_tf.getRPYRot();

	// Set rotation
	basePose.set_base_roll(     rpy[0]);
	basePose.set_base_elevation(rpy[1]);
	basePose.set_base_azimuth(  rpy[2]);
	// Set translation
	basePose.set_x(robotPose_mat[0][3], 1000);
	basePose.set_y(robotPose_mat[1][3], 1000);
	basePose.set_z(robotPose_mat[2][3], 1000);

	// SmartSoft data
	CommBasicObjects::CommBaseState robotBaseState;

	// BaseState
	CommBasicObjects::CommTimeStamp time_stamp;
	time_stamp.set_now();
	robotBaseState.set_time_stamp(time_stamp);
	robotBaseState.set_base_position(basePose);
	robotBaseState.set_base_raw_position(basePose);
//	commCurrentBaseState.set_base_velocity(COMP->velocity->getBaseVelocity());

	//
	// Finally publish robot base state update
	//
	this->baseStateServiceOutPut(robotBaseState);

	// Delay (should be handled by SmartSoft, but how??)
	yarp::os::Time::delay(COMP->COMP->getGlobalState().getSettings().getPeriod());

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}

int UpdateThread::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
