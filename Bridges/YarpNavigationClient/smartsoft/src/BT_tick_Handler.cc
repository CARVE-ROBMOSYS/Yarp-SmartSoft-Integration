//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "BT_tick_Handler.hh"
#include "YarpNavigationClient.hh"

#include <yarp/os/Vocab.h>
#include <yarp/os/LogStream.h>

BT_tick_Handler::BT_tick_Handler(Smart::IQueryServerPattern<CommYARP_BT::CommTickCommand, CommYARP_BT::CommTickResult, SmartACE::QueryId>* server)
:	BT_tick_HandlerCore(server)
{
	std::cout << "BT_tick_Handler::BT_tick_Handler" << std::endl;

}

BT_tick_Handler::~BT_tick_Handler()
{
	
}


void BT_tick_Handler::handleQuery(const SmartACE::QueryId &id, const CommYARP_BT::CommTickCommand& request) 
{
	CommYARP_BT::CommTickResult answer;

	CommYARP_BT::TickResult result = CommYARP_BT::TickResult::Failure;
	yarp::dev::NavigationStatusEnum status = yarp::dev::navigation_status_error;

	std::cout << "\n*********************************************" << std::endl;
	std::cout << "Received request " << request.getCommand() << "  --  " << request.getParameter() << std::endl;


	// implement your query handling logic here and fill in the answer object
	static bool has_goal = false;

	std::cout << "has goal " << has_goal << std::endl;

	CommYARP_BT::TickCommand::ENUM_TickCommand cmd = request.getCommand();
	switch(cmd)
	{
		case CommYARP_BT::TickCommand::Tick:
		{
			if(COMP->reachedLocations[request.getParameter()] == true)
			{
				result = CommYARP_BT::TickResult::Success;
				yInfo() << "Location " << request.getParameter() << " reached";
				break;
			}

			if(has_goal)
			{
				COMP->iNav->getNavigationStatus(status);
				std::cout << " navigation status " << yarp::os::Vocab::decode(status) << std::endl;

				switch(status)
				{
					case yarp::dev::navigation_status_goal_reached:
					case yarp::dev::navigation_status_idle:
						result = CommYARP_BT::TickResult::Success;
						COMP->reachedLocations[request.getParameter()] = true;
						has_goal = false;
						break;

					case yarp::dev::navigation_status_error:
					case yarp::dev::navigation_status_failing:
						result = CommYARP_BT::TickResult::Failure;
						has_goal = false;
						break;

					default:
						result = CommYARP_BT::TickResult::Running;
				}
			}
			else
			{
				std::cout << "Calling gotoTargetByLocationName(" << request.getParameter() << ") ..." << std::endl ;
				if( COMP->iNav->gotoTargetByLocationName(request.getParameter()))   // this may require some time (???)
				{
					result = CommYARP_BT::TickResult::Running;
					has_goal = true;
					COMP->reachedLocations[request.getParameter()] = false;
				}
				std:: cout << " done" << std::endl;
			}
		} break;

		case CommYARP_BT::TickCommand::Halt:
		{
			COMP->iNav->stopNavigation();
			has_goal = false;
			result = CommYARP_BT::TickResult::Success;
		} break;
	}


//	sleep(1);

//	answer.setResult(CommYARP_BT::TickResult::Success);
	answer.setResult(result);

	std::cout << "ID " <<  id << " req " << request << "; result " << result <<  "  answer " << answer << std::endl;

	this->server->answer(id, answer);
}
