//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "BT_Tick_Query_HandlerCore.hh"
#include "BT_Tick_Query_Handler.hh"

// include observers

BT_Tick_Query_HandlerCore::BT_Tick_Query_HandlerCore(Smart::IQueryServerPattern<CommYARP_BT::CommTickCommand, CommYARP_BT::CommTickResult, SmartACE::QueryId>* server)
:	Smart::IQueryServerHandler<CommYARP_BT::CommTickCommand, CommYARP_BT::CommTickResult, SmartACE::QueryId>(server)
{
	
}

BT_Tick_Query_HandlerCore::~BT_Tick_Query_HandlerCore()
{
	
}

void BT_Tick_Query_HandlerCore::updateAllCommObjects()
{
}

void BT_Tick_Query_HandlerCore::notify_all_interaction_observers() {
	std::unique_lock<std::mutex> lock(interaction_observers_mutex);
	// try dynamically down-casting this class to the derived class 
	// (we can do it safely here as we exactly know the derived class)
	if(const BT_Tick_Query_Handler* bT_Tick_Query_Handler = dynamic_cast<const BT_Tick_Query_Handler*>(this)) {
		for(auto it=interaction_observers.begin(); it!=interaction_observers.end(); it++) {
			(*it)->on_update_from(bT_Tick_Query_Handler);
		}
	}
}

void BT_Tick_Query_HandlerCore::attach_interaction_observer(BT_Tick_Query_HandlerObserverInterface *observer) {
	std::unique_lock<std::mutex> lock(interaction_observers_mutex);
	interaction_observers.push_back(observer);
}

void BT_Tick_Query_HandlerCore::detach_interaction_observer(BT_Tick_Query_HandlerObserverInterface *observer) {
	std::unique_lock<std::mutex> lock(interaction_observers_mutex);
	interaction_observers.remove(observer);
}
