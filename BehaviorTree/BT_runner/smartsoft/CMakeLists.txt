#--------------------------------------------------------------------------
# Code generated by the SmartSoft MDSD Toolchain
# The SmartSoft Toolchain has been developed by:
#  
# Service Robotics Research Center
# University of Applied Sciences Ulm
# Prittwitzstr. 10
# 89075 Ulm (Germany)
#
# Information about the SmartSoft MDSD Toolchain is available at:
# www.servicerobotik-ulm.de
#
# This file is generated once. Modify this file to your needs. 
# If you want the toolchain to re-generate this file, please 
# delete it before running the code generator.
#--------------------------------------------------------------------------

CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

# find the SmartSoft CMake Macros (version 2 that uses CMake v3)
FIND_FILE(SMART_MACROS SmartMacros2.cmake PATHS $ENV{SMART_ROOT_ACE}/CMakeMacros /opt/smartSoftAce/CMakeMacros)
INCLUDE(${SMART_MACROS})

# Create and configure a CMake project for a CommunicationObject
SMART_COMPONENT_PROJECT()

# find SmartSoft package
#FIND_SMARTSOFT(3.0)
#FIXME: generalize this
FIND_PACKAGE(AceSmartSoft PATHS $ENV{SMART_ROOT_ACE}/build)

# generte doxygen documentation
SMART_COMPONENT_GENERATE_DOC()

# automatically build CommunicationObject dependencies
SMART_COMPONENT_AUTOBUILD_DEPENDENCIES()

#################################################################################
## here you can put all your project-specific compiler configurations          ##
## using regular CMake commands (like FIND_PACKAGE, INCLUDE_DIRECTORIES, etc.) ##

# you can add additional external libraries using regular CMake commands, e.g.:
#FIND_PACKAGE(<SomePackageName>)
FIND_PACKAGE(open62541 QUIET PATHS /usr/local/lib/cmake)

# these are the regular includes (add your own includes, if needed)
INCLUDE_DIRECTORIES(
  ${CMAKE_CURRENT_LIST_DIR}/src
  ${CMAKE_CURRENT_LIST_DIR}/src-gen
  ${CMAKE_CURRENT_LIST_DIR}/src-gen/params
)

# collect the toolchain-generated source-files
FILE(GLOB_RECURSE SRC ${CMAKE_CURRENT_LIST_DIR}/src/*.cc)
FILE(GLOB_RECURSE SRC_GEN ${CMAKE_CURRENT_LIST_DIR}/src-gen/*.cc)
FILE(GLOB_RECURSE SRC_GEN_PARAMS ${CMAKE_CURRENT_LIST_DIR}/src-gen/params/*.cc)

# collect your own (local) source-files here (if needed)

# generate the BT engine
# execute_process(COMMAND bash -c "readskill.native sklist.xml")                      # --> genera skill.ml
# execute_process(COMMAND bash -c "ocamlbuild -use-ocamlfind interpreter.native.o")   # --> genera interpreter.native.o che rinominiamo modcaml.o (o come ci piace)

# set(SRCS main.cpp wrap.cpp)
set(OBJS ${CMAKE_SOURCE_DIR}/../libs/modcaml.o)
set(OCAML_SRCS ../OCamlWrap/wrap.c          # wrap c/c++ 
            src/ExecSkill_wrap.cpp)         # bridge verso SmartSoft

 SET_SOURCE_FILES_PROPERTIES(${OBJS} 
                            PROPERTIES
                            EXTERNAL_OBJECT true
                            GENERATED true
                            )

include_directories(${CMAKE_SOURCE_DIR}/../)

# create the executable using collected source-files
ADD_EXECUTABLE(${PROJECT_NAME} ${SRC} ${SRC_GEN} ${SRC_GEN_PARAMS} ${OCAML_SRCS} ${OBJS})

# add_library(wrap SHARED ${OCAML_SRCS})

# findPackage(ocaml)  # --> cartella con le librerie /usr/lib/ocaml)
# link your external libraries here (if there are any)
target_link_libraries(${PROJECT_NAME}   -L/usr/lib/ocaml
                                        asmrun
                                        unix
                                        dl 
                                        m)


IF(open62541_FOUND)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} open62541)
ENDIF(open62541_FOUND)

INSTALL(FILES ${PROJECT_SOURCE_DIR}/bt_description.xml DESTINATION data)

## end user-code                                                               ##
#################################################################################

# SmartSoftKernel is one of the default dependencies for each component
TARGET_LINK_LIBRARIES(${PROJECT_NAME} AceSmartSoftKernel)

# automatically link to all dependent CommunicationObjects
SMART_COMPONENT_AUTOLINK_DEPENDENCIES()

# automatically install the component target
SMART_COMPONENT_AUTOINSTALL()
