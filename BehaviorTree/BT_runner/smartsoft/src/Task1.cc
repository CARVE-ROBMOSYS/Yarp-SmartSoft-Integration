//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "Task1.hh"
#include "BT_runner.hh"
#include "../../OCamlWrap/wrap.h"
#include "caml/callback.h"

#include <iostream>

Task1::Task1(SmartACE::SmartComponent *comp) 
:	Task1Core(comp)
{
	std::cout << "constructor Task1\n";
}
Task1::~Task1() 
{
	std::cout << "destructor Task1\n";
}



int Task1::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further

	char *dummy[] = {nullptr};
	std::cout << "Calling caml_startup" << std::endl;
	caml_startup(dummy);

//	std::string bt_filename(COMP->getGlobalState().getSettings().getBt_description() );
	std::string bt_filename("bt_description.xml");

	std::cout << "Reading BT from file " << bt_filename << std::endl;
	behaviourTree = read_bt(bt_filename.c_str());
	std::cout << "... done!" << std::endl;

	return 0;
}

int Task1::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel
	
	// to get the incoming data, use this methods:
	Smart::StatusCode status;

	std::cout << "\n\n-------------------------\n" << "on_execute() " << std::endl;

	int ret = tick(behaviourTree);
	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	std::cout << "-> tick return value is " << ret << std::endl;

	int secs = 1;
	std::cout << "sleeping " << secs << " sec " << std::endl;
	sleep(secs);

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}

int Task1::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
