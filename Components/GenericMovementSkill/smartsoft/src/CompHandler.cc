//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "CompHandler.hh"
#include "GenericMovementSkill.hh"

#include <iostream>

// include communication objects

#include <memory>
#include <yarp/os/Property.h>
#include <yarp/os/LogStream.h>

using namespace std;
using namespace yarp::os;
using namespace yarp::dev;

const string separator = string("/");

Property createConfig(string partName)
{
	Property config;
	config.put("device", "remote_controlboard");
	config.put("local",  string("/genericMovement/") + partName);
	config.put("remote", separator + COMP->getGlobalState().getSettings().getRobotName() + separator + partName);
	return config;
}

void CompHandler::onStartup() 
{
	std::cout << "startup - put your startupCode in CompHandler::onStartup()!!!\n";

	bool result{true};
	Property config;
	Smart::StatusCode status;


	config = createConfig("left_arm");
	result &= COMP->leftArmCb .open(config);

	config = createConfig("right_arm");
	result &= COMP->rightArmCb .open(config);

	config = createConfig("torso");
	result &= COMP->torsoCb .open(config);

	config = createConfig("head");
	result &= COMP->headCb .open(config);

	COMP->cartesianLeftArm .open("/genericMovement/cartesian/left/rpcClient");
	COMP->cartesianRightArm.open("/genericMovement/cartesian/right/rpcClient");
	COMP->blackBoardRPC    .open("/genericMovement/blackboard/rpcClient");

	if(!result)
	{
		throw std::runtime_error("Cannot open all required devices.");
	}

	COMP->useCartesian = COMP->getGlobalState().getSettings().getUseCartesian();

	if(COMP->useCartesian)
	{
		result &= yarp::os::Network::connect(COMP->cartesianLeftArm.getName(),  string("/cer_reaching-controller/left/rpc"));
		result &= yarp::os::Network::connect(COMP->cartesianRightArm.getName(), string("/cer_reaching-controller/right/rpc"));
	}
	result &= yarp::os::Network::connect(COMP->blackBoardRPC.getName(), "/blackboard/rpc:i");

	if(!result)
	{
		throw std::runtime_error("Cannot connect RPC ports to servers.");
	}

	IPositionControl *p;

	// get position interfaces
	COMP->leftArmCb.view(p);
	COMP->controlMap["left_arm"] = p;

	COMP->rightArmCb.view(p);
	COMP->controlMap["right_arm"] = p;

	COMP->torsoCb.view(p);
	COMP->controlMap["torso"] = p;

	COMP->headCb.view(p);
	COMP->controlMap["head"] = p;

	yInfo() << "All devices opened successfully";

	// Start all services. If you need manual control, use the content of this function to
	// connect and start each service individually, e.g:
	// COMP->connectMyPortName("SmartExampleComponent", "examplePort");
	status = COMP->connectAndStartAllServices();
	
	// Start all tasks. If you need manual control, use the content of this function to
	// start each task individually.
	COMP->startAllTasks();
	
	// Start all timers. If you need manual control, use the content of this function to
	// start each timer individually.
	COMP->startAllTimers();
	
	// Notify the component that setup/initialization is finished.
	// You may move this function to any other place.
	COMP->setStartupFinished(); 
}

void CompHandler::onShutdown() 
{
	std::cout << "shutdown - put your cleanup code in CompHandler::onShutdown()!!!\n";
	
}
