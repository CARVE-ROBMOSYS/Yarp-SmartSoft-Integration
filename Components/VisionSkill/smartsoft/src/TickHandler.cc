//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "TickHandler.hh"
#include "VisionSkill.hh"

#include <yarp/os/Bottle.h>
#include <yarp/os/Network.h>
#include <yarp/os/LogStream.h>

using namespace std;
using namespace yarp::os;

TickHandler::TickHandler(Smart::IQueryServerPattern<CommYARP_BT::CommTickCommand, CommYARP_BT::CommTickResult, SmartACE::QueryId>* server)
:	TickHandlerCore(server)
{
	bool ret = false;
	std::cout << "BT_tick_Handler::BT_tick_Handler" << std::endl;
	ret = blackBoard_Client.open("/VisionSkill/blackboard:o");
	ret &= yarp::os::Network::connect("/VisionSkill/blackboard:o", "/blackboard/rpc:i");
	if(!ret)
	{
		yError() << "Cannot connect to YARP blackboard";
	}
	
}

TickHandler::~TickHandler()
{
	
}


void TickHandler::handleQuery(const SmartACE::QueryId &id, const CommYARP_BT::CommTickCommand& request) 
{
	// init helper variables
	CommYARP_BT::CommTickResult answer;
	CommYARP_BT::TickResult result = CommYARP_BT::TickResult::Failure;

	// debug print
	std::cout << "Received request " << request.getCommand() << "  --  " << request.getParameter() << std::endl;

	// handle tick
	CommYARP_BT::TickCommand::ENUM_TickCommand cmd = request.getCommand();
	string params = request.getParameter();

	switch(cmd)
	{
		case CommYARP_BT::TickCommand::Tick:
		{
			Bottle toBoard, reply;
			toBoard.addString("set");
			toBoard.addString("BottleLocated");
			toBoard.addString("True");
			blackBoard_Client.write(toBoard, reply);

			if(reply.get(0).asInt32() == 1)
				result = CommYARP_BT::TickResult::Success;
			else
				result = CommYARP_BT::TickResult::Failure;
		} break;

		case CommYARP_BT::TickCommand::Halt:
		{
			// Dummy halt
			result = CommYARP_BT::TickResult::Success;
		} break;
	}

	// implement your query handling logic here and fill in the answer object
	answer.setResult(result);
	this->server->answer(id, answer);
}
