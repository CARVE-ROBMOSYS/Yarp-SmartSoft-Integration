//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "SequencerActivity.hh"
#include "SequencePath.hh"

#include <iostream>

using namespace std;
using namespace CommYARP_BT;

SequencerActivity::SequencerActivity(SmartACE::SmartComponent *comp) 
:	SequencerActivityCore(comp)
{
	std::cout << "constructor SequencerActivity\n";
}
SequencerActivity::~SequencerActivity() 
{
	std::cout << "destructor SequencerActivity\n";
}



int SequencerActivity::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}

int SequencerActivity::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel

	// to get the incoming data, use this methods:
	Smart::StatusCode status;
	CommYARP_BT::CommTickResult answer;

	std::cout << "Hello from Activity " << std::endl;

    std::unique_lock<std::mutex> lk(COMP->mutex);
    auto *component = COMP;

    // Wait for a new message
    COMP->gotNewData.wait(lk, [component]{ std::cout << component->isNewData << " " << COMP->isNewData << std::endl;
    										return  (bool)(COMP->isNewData || COMP->isClosing) ;});


	std::cout << COMP->isNewData << " " <<  COMP->isClosing << std::endl;

    if(COMP->isClosing)
    	return -1;

	std::cout << "SequencerActivity " << __LINE__ << std::endl;

    // execute the request

	// if command is halt, do something different (?)


	CommTickResult navigationAnswer, myAnswer;
	CommTickCommand myRequest;

	if(COMP->currentStep >= COMP->inputData.size())
	{
		// path already completed
		myAnswer.setResult(TickResult::Success);
	}
	else
	{
		std::cout << "SequencerActivity " << __LINE__ << std::endl;

		myRequest.setCommand(COMP->cmd.getCommand());
		std::cout << "SequencerActivity " << __LINE__ << std::endl;

		int i = COMP->currentStep;
		std::cout << "SequencerActivity " << __LINE__ << " " << i << std::endl;

		std::string curr = COMP->inputData[i];
		std::cout << "SequencerActivity " << __LINE__  << " " << curr << std::endl;

		myRequest.setParameter(curr);
		std::cout << "SequencerActivity " << __LINE__ << std::endl;

		myAnswer.setResult(TickResult::Running);


		std::cout << "Sequencer [id " << COMP->reqId << "]:  Got request " << COMP->cmd << std::endl;
		std::cout << "Sequencer [id " << COMP->reqId << "]:  my  request " << myRequest << std::endl;

		COMP->tickClient->query(myRequest, navigationAnswer);

		std::cout << "Sequencer [id " << COMP->reqId << "]:  Nav answer " << navigationAnswer << std::endl;

		switch(navigationAnswer.getResult() )
		{
			case TickResult::Success:
			{
				while(navigationAnswer.getResult() == TickResult::Success)
				{
					std::cout << "Sequencer [id " << COMP->reqId << "]:  Step num " << COMP->currentStep << " Done."<< std::endl;
					COMP->currentStep++;
					if(COMP->currentStep >= COMP->inputData.size())
					{
						// All steps are done, the path succeeded
						myAnswer.setResult(TickResult::Success);
//						COMP->currentStep = 0;
						break;
					}
					myRequest.setParameter(COMP->inputData[COMP->currentStep]);
					std::cout << "Sequencer [id " << COMP->reqId << "]:  Now ticking " << COMP->inputData[COMP->currentStep] << std::endl;

					COMP->tickClient->query(myRequest, navigationAnswer);
					std::cout << "Sequencer [id " << COMP->reqId << "]:  Nav answer " << navigationAnswer << std::endl;

				}
			} break;

			case TickResult::Failure:
			{
				myAnswer.setResult(TickResult::Failure);
			} break;

			case TickResult::Running:
			{
				myAnswer.setResult(TickResult::Running);
			} break;
		}

		std::cout << "Sequencer [id " << COMP->reqId << "]:  My  answer " << myAnswer << std::endl;

	}
	COMP->tickServer->answer(COMP->reqId, myAnswer);

	COMP->isNewData = false;
	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}

int SequencerActivity::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
