//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "TickHandler.hh"
#include "GraspingSkill.hh"

#include <yarp/os/LogStream.h>

using namespace std;

TickHandler::TickHandler(Smart::IQueryServerPattern<CommYARP_BT::CommTickCommand, CommYARP_BT::CommTickResult, SmartACE::QueryId>* server)
:	TickHandlerCore(server)
{
	COMP->RPChome.open("/SmartSoft/homing");
	COMP->RPCgrasp.open("/SmartSoft/grasping");

	yarp::os::Network::connect(COMP->RPChome.getName(),  "/action-gateway/cmd:io");
	yarp::os::Network::connect(COMP->RPCgrasp.getName(), "/graspProcessor/cmd:rpc");
}

TickHandler::~TickHandler()
{
	
}

void TickHandler::handleQuery(const SmartACE::QueryId &id, const CommYARP_BT::CommTickCommand& request) 
{
	// init helper variables
	CommYARP_BT::CommTickResult answer;
	CommYARP_BT::TickResult result = CommYARP_BT::TickResult::Failure;

	// debug print
	std::cout << "Received request " << request.getCommand() << "  --  " << request.getParameter() << std::endl;

	// handle input parameters
	CommYARP_BT::TickCommand::ENUM_TickCommand cmd = request.getCommand();

	// Parse param string into vector
	std::string params = request.getParameter();
	vector<string> paramsVect;
	stringstream ss(params);
	string temp;
	while (ss >> temp)
		paramsVect.push_back(temp);

	switch(cmd)
	{
		case CommYARP_BT::TickCommand::Tick:
		{
			if(paramsVect[0] == "home")
			{
				yarp::os::Bottle cmd;
				cmd.addString("home");
				bool ret = COMP->RPChome.write(cmd);
				yInfo() << "home ret " << ret << " cmd " << cmd.toString();
				result = CommYARP_BT::TickResult::Success;
			}

			if(paramsVect[0] == "grasp")
			{
				yarp::os::Bottle cmd;
				cmd.addString("grasp");
				cmd.addString("Bottle");
				cmd.addString("right");
				bool ret = COMP->RPCgrasp.write(cmd);
				yInfo() << "grasp ret " << ret << " cmd " << cmd.toString();
				result = CommYARP_BT::TickResult::Running;
			}

		} break;

		case CommYARP_BT::TickCommand::Halt:
		{
			// Dummy halt
			result = CommYARP_BT::TickResult::Success;
		} break;
	}

	// implement your query handling logic here and fill in the answer object
	answer.setResult(result);
	this->server->answer(id, answer);
}
